<?xml version="1.0"?>
<f:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:f="library://ns.feathersui.com/mxml"
               xmlns:layout="feathersx.layout.*"
               theme="feathers.themes.MetalWorksMobileTheme" showStats="true">

    <fx:Script>
        <![CDATA[
        import com.airext.openssl.demo.data.Constants;
        import com.airext.openssl.demo.utils.getBytes;
        import com.github.airext.OpenSSL;

        import flash.utils.ByteArray;

        // MARK: Utils

        private function log(...args): void {
            outputText.text += args + "\n";
            outputText.verticalScrollPosition = outputText.maxVerticalScrollPosition;
            trace(args);
        }

        // MARK: Handlers

        private function isSupportedTapped(): void {
            log("Supported: " + OpenSSL.isSupported);
        }

        private function extensionVersionTapped(): void {
            log("Extension version is: " + OpenSSL.extensionVersion);
        }

        private function nativeVersionTapped(): void {
            log("Extension version is: " + OpenSSL.nativeVersion);
        }

        private function rsaPrivatelyEncryptTapped(): void {
            var t: Number = getTimer();
            var dto: Object = {
                id: "5de575e7ab273f6b7a87b968",
                username: "mail@example.com",
                firstName: "Test",
                lastName: "Test"
            };
            var input: ByteArray = new ByteArray();
            input.writeObject(dto);
            log(">>> serialization took", t - getTimer(), "ms");
            t = getTimer();
            var output: ByteArray = OpenSSL.shared.rsaEncryptWithPrivateKey(input);
            log(">>> encryption took" + (getTimer() - t) + "ms");
            log(output.readUTFBytes(output.length));
        }

        private function rsaEncryptTapped(): void {
            var data: ByteArray = new ByteArray();
            data.writeUTFBytes("Hello, world!");
            var publicKey:ByteArray = getBytes(File.applicationDirectory.resolvePath("certificates/Server1 - Public key.pem"))
            var privateKey:ByteArray = getBytes(File.applicationDirectory.resolvePath("certificates/Server1 - Private key.pem"))
            var encrypted: ByteArray = OpenSSL.shared.rsaEncrypt(data, publicKey);
            var decrypted: ByteArray = OpenSSL.shared.rsaDecrypt(encrypted, privateKey);
            log(decrypted.readUTFBytes(decrypted.length));
        }

        // AES

        private var aesEncrypted: ByteArray;

        private function aesEncryptTapped(): void {
            var data: ByteArray = new ByteArray();
            data.writeUTFBytes("The quick brown fox jumps over the lazy dog");
            var key: ByteArray = new ByteArray();
            key.writeUTFBytes("01234567890123456789012345678901");
            var iv: ByteArray = new ByteArray();
            iv.writeUTFBytes("0123456789012345");
            aesEncrypted = OpenSSL.shared.aesEncrypt(data, key, iv);
            log("AES encrypted: " + aesEncrypted.readUTFBytes(aesEncrypted.length));
        }

        private function aesDecryptTapped(): void {
            if (aesEncrypted == null) {
                log("Tap on `AES Encrypt` before");
                return;
            }
            var key: ByteArray = new ByteArray();
            key.writeUTFBytes("01234567890123456789012345678901");
            var iv: ByteArray = new ByteArray();
            iv.writeUTFBytes("0123456789012345");
            var decrypted: ByteArray = OpenSSL.shared.aesDecrypt(aesEncrypted, key, iv);
            log("AES decrypted: " + decrypted.readUTFBytes(decrypted.length));
        }

        // SHA256

        private function sha256Tapped(): void {
            var data: ByteArray = new ByteArray();
            data.writeUTFBytes("abc123abc123abc123abc123abc123abc123abc123abc123");
            var digest: ByteArray = OpenSSL.shared.sha256Compute(data);
            log("SHA256 digest: " + digest.readUTFBytes(digest.length));
        }

        // SHA256

        private function hmacTapped(): void {
            var data: ByteArray = new ByteArray();
            data.writeUTFBytes("The quick brown fox jumps over the lazy dog");
            var key: ByteArray = new ByteArray();
            key.writeUTFBytes("01234567890123456789012345678901");
            var hmac: ByteArray = OpenSSL.shared.hmacCompute(data, null, key);
            log("HMAC: " + hmac.readUTFBytes(hmac.length));
        }

        // Base64

        private function encodeDecodeBase64StringTapped(): void {
            var original: String = "Hello World";
            var base64: String = OpenSSL.shared.base64FromString(original);
            var decoded: String = OpenSSL.shared.base64ToString(base64);
            log(decoded + " = " + original);
        }

        private function encodeDecodeBase64BytesTapped(): void {
            var original: String = "Hello World";
            var input: ByteArray = new ByteArray();
            input.writeUTFBytes(original);
            var base64: String = OpenSSL.shared.base64FromBytes(input);
            var output: ByteArray = OpenSSL.shared.base64ToBytes(base64);
            var decoded: String = output.readUTFBytes(output.length);
            log(decoded + " = " + original);
        }

        private function encodeDecodeHexStringTapped(): void {
            var original: String = "Hello World";
            var hex: String = OpenSSL.shared.hexFromString(original);
            var decoded: String = OpenSSL.shared.hexToString(hex);
            log(decoded + " = " + original);
        }

        private function encodeDecodeHexBytesTapped(): void {
            var original: String = "Hello World";
            var input: ByteArray = new ByteArray();
            input.writeUTFBytes(original);
            var hex: String = OpenSSL.shared.hexFromBytes(input);
            var output: ByteArray = OpenSSL.shared.hexToBytes(hex);
            var decoded: String = output.readUTFBytes(output.length);
            log(decoded + " = " + original);
        }

        private function getBuildVersionTapped(): void {
            log(OpenSSL.shared.getBuildVersion());
        }

        private function verifyTapped(rootCertificate: String, certificate: String): void {
            if (OpenSSL.shared.verifyCertificate(rootCertificate, certificate)) {
                log("certifcate is valid");
            } else {
                log("certifcate is invalid");
            }
        }
        ]]>
    </fx:Script>


    <f:layout>
        <f:VerticalLayout paddingTop="44" paddingBottom="34" />
    </f:layout>

    <f:ScrollContainer>
        <f:layoutData>
            <f:VerticalLayoutData percentHeight="100" percentWidth="100" />
        </f:layoutData>
        <f:layout><f:VerticalLayout horizontalAlign="justify" gap="10" /></f:layout>
        <f:Button label="Is Supported" triggered="isSupportedTapped()" />
        <f:Button label="Extension Version" triggered="extensionVersionTapped()" />
        <f:Button label="OpenSSL Version" triggered="nativeVersionTapped()" />
        <!--    RSA    -->
        <layout:Spacer width="280" height="2" />
        <f:Button label="RSA Encrypt Privately" triggered="rsaPrivatelyEncryptTapped()" />
        <f:Button label="RSA Encrypt" triggered="rsaEncryptTapped()" />
        <f:Button label="Verify Certificate" triggered="verifyTapped(Constants.acmeRootCertificate, Constants.acmeCertificate)" />
        <f:Button label="Verify Fake Certificate" triggered="verifyTapped(Constants.acmeRootCertificate, Constants.acmeFakeCertificate)" />
        <!--    RSA    -->
        <layout:Spacer width="280" height="2" />
        <f:Button label="AES Encrypt" triggered="aesEncryptTapped()" />
        <f:Button label="AES Decrypt" triggered="aesDecryptTapped()" />
        <!--    SHA    -->
        <layout:Spacer width="280" height="2" />
        <f:Button label="SHA256" triggered="sha256Tapped()" />
        <!--    HMAC    -->
        <layout:Spacer width="280" height="2" />
        <f:Button label="HMAC" triggered="hmacTapped()" />
        <!--    Base64    -->
        <layout:Spacer width="280" height="2" />
        <f:Button label="Encode/Decode Base64 String" triggered="encodeDecodeBase64StringTapped()" />
        <f:Button label="Encode/Decode Base64 Bytes" triggered="encodeDecodeBase64BytesTapped()" />
        <!--    HEX    -->
        <layout:Spacer width="280" height="2" />
        <f:Button label="Encode/Decode Hex String" triggered="encodeDecodeHexStringTapped()" />
        <f:Button label="Encode/Decode Hex Bytes" triggered="encodeDecodeHexBytesTapped()" />
        <layout:Spacer width="280" height="2" />
        <!--   Debug   -->
        <f:Button label="Native Build Version" triggered="getBuildVersionTapped()" />
    </f:ScrollContainer>

    <f:ScrollText id="outputText" height="100">
        <f:layoutData>
            <f:VerticalLayoutData percentWidth="100" />
        </f:layoutData>
    </f:ScrollText>

</f:Application>
