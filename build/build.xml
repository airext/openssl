<?xml version="1.0" encoding="UTF-8"?>
<project name="Air Native Extension Build Scripts" default="all">

    <!--=====================================================================-->
    <!--                             Properties                              -->
    <!--=====================================================================-->

    <property name="project.name" value="openssl" />
    <property name="product.name" value="OpenSSL" />
    <property name="extension.id" value="com.github.airext.OpenSSL" />

    <property name="xcode.project.dir" value="../${project.name}-xcode/${product.name}" />
    <property name="air.project.dir" value="../${project.name}-air/${project.name}" />
    <property name="air-debug.project.dir" value="../${project.name}-air/${project.name}-debug" />
    <property name="android.project.dir" value="../${project.name}-android/${project.name}" />
    <property name="win.project.dir" value="../${project.name}-win" />

	<property file="build.properties"/>

    <!--=====================================================================-->
    <!--                               Macros                                -->
    <!--=====================================================================-->

    <macrodef name="pod.install">
        <sequential>
            <exec executable="pod" dir="${xcode.project.dir}">
                <arg line="install" />
            </exec>
        </sequential>
    </macrodef>

    <!--=====================================================================-->
    <!--                             Build All                               -->
    <!--=====================================================================-->

    <target name="all" depends="ios,osx,air,package" description="Full build of extension">
    </target>

    <!--=====================================================================-->
    <!--                          Build iOS Library                          -->
    <!--=====================================================================-->


	<target name="ios" description="Build iOS Library">
        <condition property="ios.configuration" value="Debug" else="Release">
            <equals arg1="${is.debug}" arg2="true" />
        </condition>

        <pod.install />

        <!-- Create temporary directory for iOS artifacts -->
        <mkdir dir="temp/ios/build/"/>

        <!-- iOS -->

        <!-- Build iOS part of the extension -->
        <exec executable="xcodebuild" failonerror="true" dir="${xcode.project.dir}" logerror="true">
            <arg line='-workspace ${product.name}.xcworkspace'/>
            <arg line='-sdk iphoneos' />
            <arg line="-scheme ANX${product.name}-iOS"/>
            <arg line='-configuration ${ios.configuration}'/>
            <arg line='SYMROOT=$(PWD)/../build/temp/ios/build'/>
        </exec>

        <!-- Copy iOS native part for iOS platform -->
		<copy file="temp/ios/build/${ios.configuration}-iphoneos/libANX${product.name}.a" tofile="temp/ios/libANX${product.name}.a" overwrite="true"/>

        <!-- iOS-Simulator -->

        <!-- Build iOS-simulator part of the extension -->
        <exec executable="xcodebuild" failonerror="true" dir="${xcode.project.dir}" logerror="true">
            <arg line='-workspace ${product.name}.xcworkspace'/>
            <arg line='-sdk iphonesimulator' />
            <arg line="-scheme ANX${product.name}-iOS"/>
            <arg line='-configuration ${ios.configuration}'/>
            <arg line='SYMROOT=$(PWD)/../build/temp/ios/build'/>
        </exec>

        <!-- Copy iOS native part for iOS-Simulator platform -->
        <copy file="temp/ios/build/${ios.configuration}-iphonesimulator/libANX${product.name}.a" tofile="temp/ios-simulator/libANX${product.name}Simulator.a" overwrite="true"/>

        <!-- Remove temporary directory for iOS artifacts -->
		<delete dir="temp/ios/build/"/>
	</target>

    <!--=====================================================================-->
    <!--                        Build macOS Library                          -->
    <!--=====================================================================-->

    <target name="osx" description="Build macOS Library">
        <condition property="mac.configuration" value="Debug" else="Release">
            <equals arg1="${is.debug}" arg2="true" />
        </condition>

        <pod.install />

        <!-- Create temporary directory for iOS artifacts -->
        <mkdir dir="temp/osx/build/"/>

        <!-- iOS -->

        <!-- Build iOS part of the extension -->
        <exec executable="xcodebuild" failonerror="true" dir="${xcode.project.dir}" logerror="true">
            <arg line='-workspace ${product.name}.xcworkspace'/>
            <arg line='-sdk macosx' />
            <arg line="-scheme ANX${product.name}-macOS"/>
            <arg line='-configuration ${mac.configuration}'/>
            <arg line='SYMROOT=$(PWD)/../build/temp/osx/build'/>
        </exec>

        <!-- Copy OSX build artifacts to temporary build folder -->
        <copy todir="temp/osx/ANX${product.name}.framework">
            <fileset dir="temp/osx/build/${mac.configuration}/ANX${product.name}.framework" includes="**/**" />
        </copy>

        <!-- Remove temporary directory for iOS artifacts -->
        <delete dir="temp/osx/build/"/>
    </target>

    <!--=====================================================================-->
    <!--                        Build Windows Library                        -->
    <!--=====================================================================-->

    <target name="win" depends="win.clean, win32, win64">

    </target>

    <target name="win.clean">
        <condition property="win.configuration" value="Debug" else="Release">
            <equals arg1="${is.debug}" arg2="true" />
        </condition>
        <exec executable="${visual.studio}/Common7/IDE/devenv" dir="${win.project.dir}" failonerror="true" logerror="true">
            <arg line='openssl-win.sln /Clean' />
        </exec>
    </target>

    <target name="win32">
        <echo>Building with configuration ${win.configuration}</echo>
        <exec executable="${visual.studio}/Common7/IDE/devenv" dir="${win.project.dir}" failonerror="true" logerror="true">
            <arg line='openssl-win.sln /Build "${win.configuration}|x86"' />
        </exec>
        <copy file="${win.project.dir}/x86/${win.configuration}/openssl-win.dll" tofile="temp/win32/ANXOpenSSL.dll" />
        <copy todir="temp/win32">
            <fileset dir="${win.project.dir}/vendor/win32" includes="**/**" />
        </copy>
    </target>

    <target name="win64">
        <echo>Building with configuration ${win.configuration}</echo>
        <exec executable="${visual.studio}/Common7/IDE/devenv" dir="${win.project.dir}" failonerror="true" logerror="true">
            <arg line='openssl-win.sln /Build "${win.configuration}|x64"' />
        </exec>
        <copy file="${win.project.dir}/x64/${win.configuration}/openssl-win.dll" tofile="temp/win64/ANXOpenSSL.dll" />
        <copy todir="temp/win64">
            <fileset dir="${win.project.dir}/vendor/win64" includes="**/**" />
        </copy>
    </target>

    <!--=====================================================================-->
    <!--                         Build AIR Library                           -->
    <!--=====================================================================-->

    <target name="air" description="Build swc library" depends="main.swc, default.swc">

	</target>

    <!-- ActionScript -->
    <target name="main.swc" description="Build iOS SWC library">

        <!-- Create temporary directory -->
        <mkdir dir="temp/swc/build/"/>

        <echo message="Building iOS SWC library ..."/>
        <fileset dir="${air.project.dir}" casesensitive="yes" id="classfiles.main">
            <include name="src/main/**/*.as"  />
        </fileset>

        <pathconvert property="classlist.main" refid="classfiles.main" pathsep=" " dirsep=".">
            <regexpmapper from=".*src.\w+.(.*)\.as" to="\1" />
        </pathconvert>

        <!-- Compile .SWC library -->
        <exec executable="java" failonerror="true" logerror="true">
            <arg line='-jar ${air.sdk}/lib/compc-cli.jar' />
            <arg line='-debug=${is.debug}' />
            <arg line='-source-path ${air.project.dir}/src/main'/>
            <arg line='-output temp/swc/ios/${project.name}.swc'/>
            <!-- <arg line='-swf-version=13'/> -->
            <arg line='-external-library-path+="${air.project.dir}/lib"' />
            <arg line='-external-library-path+="${air.sdk}/frameworks/libs/air/airglobal.swc"'/>
            <arg line='-include-classes ${classlist.main}'/>
        </exec>
        
        <!-- Unzip .SWC to copy internal library.swf file to corresponded platfom folders -->
        <unzip src="temp/swc/ios/${project.name}.swc" dest="temp/swc/build" overwrite="true"/>

        <!-- Copy library.swf to iOS platform folder -->
        <copy file="temp/swc/build/library.swf" todir="temp/ios" overwrite="true"/>

        <!-- Copy library.swf to iOS-Simulator platform folder -->
        <copy file="temp/swc/build/library.swf" todir="temp/ios-simulator" overwrite="true"/>

        <!-- Copy library.swf to macOS platform folder -->
        <copy file="temp/swc/build/library.swf" todir="temp/osx" overwrite="true"/>

        <!-- Copy library.swf to Android platform folder -->
        <copy file="temp/swc/build/library.swf" todir="temp/android" overwrite="true"/>

        <!-- Copy library.swf to Android platform folder -->
        <copy file="temp/swc/build/library.swf" todir="temp/win32" overwrite="true"/>

        <!-- Copy library.swf to Android platform folder -->
        <copy file="temp/swc/build/library.swf" todir="temp/win64" overwrite="true"/>

        <!-- Remove temporary folder -->
        <delete dir="temp/swc/build/"/>
    </target>

    <!-- ActionScript Default -->
    <target name="default.swc" description="Build Default SWC library">

        <!-- Create temporary directory -->
        <mkdir dir="temp/swc/build/"/>

        <echo message="Building Default SWC library ..."/>
        <fileset dir="${air.project.dir}" casesensitive="yes" id="classfiles.default">
            <include name="src/default/**/*.as" />
        </fileset>

        <pathconvert property="classlist.default" refid="classfiles.default" pathsep=" " dirsep=".">
            <regexpmapper from=".*src.\w+.(.*)\.as" to="\1" />
        </pathconvert>

        <!-- Compile .SWC library -->
        <exec executable="java" failonerror="true" logerror="true">
            <arg line='-jar ${air.sdk}/lib/compc-cli.jar' />
            <arg line='-debug=${is.debug}' />
            <arg line='-source-path+=${air.project.dir}/src/default'/>
            <arg line='-output temp/swc/default/${project.name}.swc'/>
            <!-- <arg line='-swf-version=13'/> -->
            <arg line='-external-library-path+="${air.sdk}/frameworks/libs/air/airglobal.swc"'/>
            <arg line='-include-classes ${classlist.default}'/>
        </exec>
        
        <!-- Unzip .SWC to copy internal library.swf file to corresponded platfom folders -->
        <unzip src="temp/swc/default/${project.name}.swc" dest="temp/swc/build" overwrite="true"/>

        <!-- Copy library.swf to Default platform folder -->
        <copy file="temp/swc/build/library.swf" todir="temp/default" overwrite="true"/>

        <!-- Remove temporary folder -->
        <delete dir="temp/swc/build/"/>
    </target>

    <!--=====================================================================-->
    <!--                         Update Descriptor                           -->
    <!--=====================================================================-->

    <macrodef name="descriptor.prepare">
        <sequential>
            <copy file="extension.xml" tofile="temp/extension.xml" overwrite="true" />
            <replaceregexp file="temp/extension.xml" match="(.description.)(.*)(.\/description.)" replace="\1Build ${build.number}\3" />
        </sequential>
    </macrodef>

    <macrodef name="descriptor.prepare.for.win">
        <sequential>
            <copy file="extension.xml" tofile="temp/extension.xml" overwrite="true" />
            <replaceregexp file="temp/extension.xml" match="(.description.)(.*)(.\/description.)" replace="\1Build ${build.number}\3" />
            <replaceregexp file="temp/extension.xml" match='.platform name="iPhone-ARM"..*?.\/platform.' replace="" flags="gsm" />
            <replaceregexp file="temp/extension.xml" match='.platform name="iPhone-x86"..*?.\/platform.' replace="" flags="gsm" />
            <replaceregexp file="temp/extension.xml" match='.platform name="MacOS-x86-64"..*?.\/platform.' replace="" flags="gsm" />
            <replaceregexp file="temp/extension.xml" match='^\s*$' replace="" flags="gsm" />
        </sequential>
    </macrodef>

    <macrodef name="descriptor.prepare.for.mac">
        <sequential>
            <copy file="extension.xml" tofile="temp/extension.xml" overwrite="true" />
            <replaceregexp file="temp/extension.xml" match="(.description.)(.*)(.\/description.)" replace="\1Build ${build.number}\3" />
            <replaceregexp file="temp/extension.xml" match='.platform name="Windows-x86"..*?.\/platform.' replace="" flags="gsm" />
            <replaceregexp file="temp/extension.xml" match='.platform name="Windows-x86-64"..*?.\/platform.' replace="" flags="gsm" />
            <replaceregexp file="temp/extension.xml" match='^\s*$' replace="" flags="gsm" />
        </sequential>
    </macrodef>

    <!--=====================================================================-->
    <!--                         Package ANE file                            -->
    <!--=====================================================================-->

    <target name="package" description="Create the extension package">
        <descriptor.prepare />

        <echo>Build directory listing:</echo>
        <exec executable="find" dir=".">
            <arg line="." />
        </exec>

        <!-- Package ANE file-->
        <exec executable="java" failonerror="true" dir="temp" logerror="true">
            <arg line="-Dhttps.protocols=TLSv1.1,TLSv1.2" />
            <arg line='-jar ${air.sdk}/lib/adt.jar' />
            <arg line="-package"/>
            <arg line="-storetype"/>
            <arg line="pkcs12"/>
            <arg line="-keystore"/>
            <arg line="${keystore.file}"/>
            <arg line="-storepass"/>
            <arg line="${keystore.password}"/>
            <arg line="-tsa http://timestamp.entrust.net/TSS/JavaHttpTS"/>
            <arg line="-target"/>
            <arg line="ane"/>
            <arg line="${project.name}.ane"/>
            <arg line="extension.xml"/>
            <arg line="-swc swc/default/${project.name}.swc"/>
            <arg line="-platform iPhone-ARM -platformoptions ../platform-ios.xml -C ios/ ."/>
            <arg line="-platform iPhone-x86 -platformoptions ../platform-ios.xml -C ios-simulator/ ."/>
            <arg line="-platform MacOS-x86-64 -C osx/ ."/>
            <arg line="-platform Windows-x86 -C win32/ ."/>
            <arg line="-platform Windows-x86-64 -C win64/ ."/>
            <arg line="-platform default -C default/ ."/>
        </exec>

        <!-- Move packaged .ANE file to /bin directory -->
        <move file="temp/${project.name}.ane" tofile="../bin/${extension.id}.ane" force="true" />

        <!-- Move default .SWC library to /bin directory -->
        <copy file="temp/swc/default/${project.name}.swc" tofile="../bin/${extension.id}.swc" force="true" />

        <copy file="../bin/${extension.id}.ane" tofile="../${project.name}-air/${project.name}-debug/ane/${extension.id}.ane" force="true" />
        <copy file="../bin/${extension.id}.swc" tofile="../${project.name}-air/${project.name}-debug/ane/${extension.id}.swc" force="true" />

        <copy file="../bin/${extension.id}.ane" tofile="../${project.name}-air/${project.name}-debug-simple/ane/${extension.id}.ane" force="true" />
        <copy file="../bin/${extension.id}.swc" tofile="../${project.name}-air/${project.name}-debug-simple/ane/${extension.id}.swc" force="true" />

        <copy file="../bin/${extension.id}.ane" tofile="../${project.name}-air/${project.name}-tests-flex/ane/${extension.id}.ane" force="true" />
        <copy file="../bin/${extension.id}.swc" tofile="../${project.name}-air/${project.name}-tests-flex/ane/${extension.id}.swc" force="true" />

        <!-- Remove temporary directory -->
        <delete dir="temp"/>
    </target>

    <target name="package.on.mac" description="Create the extension package" depends="ios,osx,air">
        <descriptor.prepare.for.mac />

        <!-- Package ANE file-->
        <exec executable="java" failonerror="true" dir="temp" logerror="true">
            <arg line="-Dhttps.protocols=TLSv1.1,TLSv1.2" />
            <arg line='-jar ${air.sdk}/lib/adt.jar' />
            <arg line="-package"/>
            <arg line="-storetype"/>
            <arg line="pkcs12"/>
            <arg line="-keystore"/>
            <arg line="${keystore.file}"/>
            <arg line="-storepass"/>
            <arg line="${keystore.password}"/>
            <arg line="-tsa http://timestamp.entrust.net/TSS/JavaHttpTS"/>
            <arg line="-target"/>
            <arg line="ane"/>
            <arg line="${project.name}.ane"/>
            <arg line="extension.xml"/>
            <arg line="-swc swc/default/${project.name}.swc"/>
            <arg line="-platform iPhone-ARM -platformoptions ../platform-ios.xml -C ios/ ."/>
            <arg line="-platform iPhone-x86 -platformoptions ../platform-ios.xml -C ios-simulator/ ."/>
            <arg line="-platform MacOS-x86-64 -C osx/ ."/>
            <arg line="-platform default -C default/ ."/>
        </exec>

        <!-- Move packaged .ANE file to /bin directory -->
        <move file="temp/${project.name}.ane" tofile="../bin/${extension.id}.ane" force="true" />

        <!-- Move default .SWC library to /bin directory -->
        <copy file="temp/swc/default/${project.name}.swc" tofile="../bin/${extension.id}.swc" force="true" />

        <copy file="../bin/${extension.id}.ane" tofile="../${project.name}-air/${project.name}-debug/ane/${extension.id}.ane" force="true" />
        <copy file="../bin/${extension.id}.swc" tofile="../${project.name}-air/${project.name}-debug/ane/${extension.id}.swc" force="true" />

        <copy file="../bin/${extension.id}.ane" tofile="../${project.name}-air/${project.name}-debug-simple/ane/${extension.id}.ane" force="true" />
        <copy file="../bin/${extension.id}.swc" tofile="../${project.name}-air/${project.name}-debug-simple/ane/${extension.id}.swc" force="true" />

        <copy file="../bin/${extension.id}.ane" tofile="../${project.name}-air/${project.name}-tests-flex/ane/${extension.id}.ane" force="true" />
        <copy file="../bin/${extension.id}.swc" tofile="../${project.name}-air/${project.name}-tests-flex/ane/${extension.id}.swc" force="true" />

        <!-- Remove temporary directory -->
         <delete dir="temp"/>
    </target>

    <target name="package.on.win" description="Create the extension package" depends="win, air">
        <descriptor.prepare.for.win />

        <!-- Package ANE file-->
        <exec executable="java" failonerror="true" dir="temp" logerror="true">
            <arg line="-Dhttps.protocols=TLSv1.1,TLSv1.2" />
            <arg line='-jar ${air.sdk}/lib/adt.jar' />
            <arg line="-package"/>
            <arg line="-storetype"/>
            <arg line="pkcs12"/>
            <arg line="-keystore"/>
            <arg line="${keystore.file}"/>
            <arg line="-storepass"/>
            <arg line="${keystore.password}"/>
            <arg line="-tsa http://timestamp.entrust.net/TSS/JavaHttpTS"/>
            <arg line="-target"/>
            <arg line="ane"/>
            <arg line="${project.name}.ane"/>
            <arg line="extension.xml"/>
            <arg line="-swc swc/default/${project.name}.swc"/>
            <arg line="-platform Windows-x86 -C win32/ ."/>
            <arg line="-platform Windows-x86-64 -C win64/ ."/>
            <arg line="-platform default -C default/ ."/>
        </exec>

        <!-- Move packaged .ANE file to /bin directory -->
        <move file="temp/${project.name}.ane" tofile="../bin/${extension.id}.ane" force="true" />

        <!-- Move default .SWC library to /bin directory -->
        <copy file="temp/swc/default/${project.name}.swc" tofile="../bin/${extension.id}.swc" force="true" />

        <copy file="../bin/${extension.id}.ane" tofile="../${project.name}-air/${project.name}-debug/ane/${extension.id}.ane" force="true" />
        <copy file="../bin/${extension.id}.swc" tofile="../${project.name}-air/${project.name}-debug/ane/${extension.id}.swc" force="true" />

        <copy file="../bin/${extension.id}.ane" tofile="../${project.name}-air/${project.name}-debug-simple/ane/${extension.id}.ane" force="true" />
        <copy file="../bin/${extension.id}.swc" tofile="../${project.name}-air/${project.name}-debug-simple/ane/${extension.id}.swc" force="true" />

        <copy file="../bin/${extension.id}.ane" tofile="../${project.name}-air/${project.name}-tests-flex/ane/${extension.id}.ane" force="true" />
        <copy file="../bin/${extension.id}.swc" tofile="../${project.name}-air/${project.name}-tests-flex/ane/${extension.id}.swc" force="true" />

        <!-- Remove temporary directory -->
<!--        <delete dir="temp"/>-->
    </target>


    <!--=====================================================================-->
    <!--                            Unit Tests                               -->
    <!--=====================================================================-->

    <target name="test.on.mac">

        <property name="tests.project.dir" value="../${project.name}-air/openssl-tests-flex" />

        <fileset id="app.ane.anes" dir="${tests.project.dir}/ane">
            <include name="**/*.ane" />
        </fileset>

        <pathconvert property="app.ane.anes" refid="app.ane.anes" pathsep="," />

        <java jar="${air.sdk}/lib/mxmlc-cli.jar" fork="true" failonerror="true">
            <arg value="+configname=airmobile"/>
            <arg line="-load-config ${air.sdk}/frameworks/air-config.xml" />
            <arg line='-source-path+=${tests.project.dir}/src'/>
            <arg value="-library-path+=${tests.project.dir}/lib"/>
            <arg value="-external-library-path+=${app.ane.anes}"/>
            <arg value="-output=${tests.project.dir}/bin/test/Main.swf"/>
            <arg value="${tests.project.dir}/src/TestRunner.as"/>
        </java>

        <copy file="${tests.project.dir}/bin/test/Main.swf" tofile="test/Main.swf" />
        <copy todir="test/assets">
            <fileset dir="${tests.project.dir}/assets" />
        </copy>
        <copy todir="test/extensions">
            <fileset dir="${tests.project.dir}/ane">
                <include name="*.ane" />
            </fileset>
        </copy>
        <copy file="${tests.project.dir}/Main-app.xml" tofile="test/Main-app.xml" />
        <replaceregexp file="test/Main-app.xml" match="(.content.)(.*)(.\/content.)" replace="\1Main.swf\3" />

        <java jar="${air.sdk}/lib/adt.jar" dir="test" fork="true" failonerror="true">
            <arg line="-package"/>
            <arg line="-storetype pkcs12"/>
            <arg line="-keystore ${keystore.file}"/>
            <arg line="-storepass ${keystore.password}"/>
            <arg line="-target bundle"/>
            <arg line="OpenSSLTests.app" />
            <arg line="Main-app.xml" />
            <arg line="Main.swf" />
            <arg line="-C assets ." />
            <arg line="-extdir extensions" />
        </java>

        <makeurl file="./test" property="tests.working.dir" />

        <exec executable="open" dir="test">
            <arg line="-a OpenSSLTests.app ${tests.working.dir}" />
        </exec>

        <waitfor maxwait="2" maxwaitunit="minute">
            <or>
                <available file="tests/tests_success.txt" />
                <available file="tests/tests_failure.txt" />
            </or>
        </waitfor>

        <fail>
            <condition>
                <available file="tests/tests_failure.txt" />
            </condition>
        </fail>

    </target>


    <target name="test.on.win">

        <property name="tests.project.dir" value="../${project.name}-air/openssl-tests-flex" />

        <fileset id="app.ane.anes" dir="${tests.project.dir}/ane">
            <include name="**/*.ane" />
        </fileset>

        <pathconvert property="app.ane.anes" refid="app.ane.anes" pathsep="," />

        <java jar="${air.sdk}/lib/mxmlc-cli.jar" fork="true" failonerror="true">
            <arg value="+configname=airmobile"/>
            <arg line="-load-config ${air.sdk}/frameworks/air-config.xml" />
            <arg line='-source-path+=${tests.project.dir}/src'/>
            <arg value="-library-path+=${tests.project.dir}/lib"/>
            <arg value="-external-library-path+=${app.ane.anes}"/>
            <arg value="-output=${tests.project.dir}/bin/test/Main.swf"/>
            <arg value="${tests.project.dir}/src/TestRunner.as"/>
        </java>

        <copy file="${tests.project.dir}/bin/test/Main.swf" tofile="test/Main.swf" />
        <copy todir="test/assets">
            <fileset dir="${tests.project.dir}/assets" />
        </copy>
        <copy todir="test/extensions">
            <fileset dir="${tests.project.dir}/ane">
                <include name="*.ane" />
            </fileset>
        </copy>
        <copy file="${tests.project.dir}/Main-app.xml" tofile="test/Main-app.xml" />
        <replaceregexp file="test/Main-app.xml" match="(.content.)(.*)(.\/content.)" replace="\1Main.swf\3" />

        <java jar="${air.sdk}/lib/adt.jar" dir="test" fork="true" failonerror="true">
            <arg line="-package"/>
            <arg line="-storetype pkcs12"/>
            <arg line="-keystore ${keystore.file}"/>
            <arg line="-storepass ${keystore.password}"/>
            <arg line="-target bundle"/>
            <arg line="OpenSSLTests" />
            <arg line="Main-app.xml" />
            <arg line="Main.swf" />
            <arg line="-C assets ." />
            <arg line="-extdir extensions" />
        </java>

        <makeurl file="./test" property="tests.working.dir" />

        <exec executable="powershell" dir="test">
            <arg line="Start-Process -FilePath OpenSSLTests/OpenSSLTestRunner.exe -WorkingDirectory ${tests.working.dir}" />
        </exec>

        <waitfor maxwait="2" maxwaitunit="minute">
            <or>
                <available file="test/tests_success.txt" />
                <available file="test/tests_failure.txt" />
            </or>
        </waitfor>

        <fail>
            <condition>
                <not>
                    <available file="test/tests_success.txt" />
                </not>
            </condition>
        </fail>

    </target>

</project>
